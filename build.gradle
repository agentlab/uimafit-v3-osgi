import aQute.bnd.gradle.Bundle
import aQute.bnd.gradle.Export
import aQute.bnd.gradle.TestOSGi
import aQute.bnd.gradle.Resolve

buildscript {
    repositories {
       maven {
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            url 'https://bndtools.ci.cloudbees.com/job/bnd.master/lastSuccessfulBuild/artifact/dist/bundles'
        }
		jcenter()
		mavenLocal()
    }
    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:+'
		classpath 'biz.aQute.bnd:biz.aQute.tester:+'
        classpath 'com.dictanova.jcasgen.gradle:gradle-jcasgen-plugin:3.0'
    }
}

version '3.0.0'
description = 'Apache UIMA Fit project'

def repositorySnapshot = "https://agentlab.ru/nexus/repository/maven-snapshots/"
def repositoryRelease  = "https://agentlab.ru/nexus/repository/maven-releases/"
def repositoryUsername = "ci"
def repositoryPassword = "=S%gm/Hpt"
def snapshot = '-SNAPSHOT'

def uimaVersion = '3.0.0-alpha02'

allprojects {

    group = 'org.apache.uima'

    apply plugin: 'maven-publish'

    publishing {
        if (project.hasProperty('release')){
            repositories {
                maven {
                    url repositoryRelease
                    credentials {
                        username repositoryUsername
                        password repositoryPassword
                    }
                }
            }
        } else {
            repositories {
                maven {
                    url repositorySnapshot
                    credentials {
                        username repositoryUsername
                        password repositoryPassword
                    }
                }
            }
        }
    }

    afterEvaluate { project ->
        if (!project.hasProperty('release')){
            project.version += snapshot
        }
        // println project.version
    }

}

subprojects {

    apply plugin: 'com.dictanova.jcasgen'
    apply plugin: 'java'
    apply plugin: 'biz.aQute.bnd.builder'

    repositories {
        mavenLocal()
		mavenCentral()
		maven {
			url 'http://repo.spring.io/plugins-release'
		}
		maven {
			url 'http://er172-vm-1.tc.test:8090/maven/nlp-uima/'
		}
    }

    dependencies {
        compileOnly 'org.osgi:org.osgi.annotation:6.0.0'
        compileOnly 'org.osgi:org.osgi.service.component.annotations:1.3.0'
		compileOnly 'org.osgi:osgi.cmpn:6.+'

		//compile('org.apache.uima:uimaj-core:3.0.0-alpha02') {
		//	exclude group: 'org.slf4j', module: 'slf4j-api'
		//}

		compile 'org.apache.uima:uimaj-ep-runtime:3.0.0-alpha02'

        compile 'org.osgi:org.osgi.framework:1.8.0'
        compile 'org.osgi:org.osgi.util.tracker:1.5.1'
        compile 'org.osgi:org.osgi.service.component:1.3.0'

        compile 'org.slf4j:slf4j-api:1.7.25'
        compile 'org.slf4j:jcl-over-slf4j:1.7.25'
        compile 'org.slf4j:log4j-over-slf4j:1.7.25'
        compile 'org.slf4j:jul-to-slf4j:1.7.25'
		compile 'ch.qos.logback:logback-classic:1.2.3'

		compile 'org.apache.felix:org.apache.felix.gogo.shell:1.+'
		compile 'org.apache.felix:org.apache.felix.gogo.command:1.+'
		compile 'org.apache.felix:org.apache.felix.scr:2.+'
		compile 'org.apache.felix:org.apache.felix.http.api'
		compile 'org.apache.felix:org.apache.felix.http.jetty:3.+'
		compile 'org.apache.felix:org.apache.felix.http.servlet-api:1.+'
		compile 'org.apache.felix:org.apache.felix.configadmin:1.+'
		compile 'org.apache.felix:org.apache.felix.eventadmin:1.+'
		compile 'org.apache.felix:org.apache.felix.metatype:1.+'
		compile 'org.apache.felix:org.apache.felix.log:1.+'
		compile 'org.apache.felix:org.apache.felix.framework:5.+'

		runtime 'org.apache.felix:org.apache.felix.webconsole:4.+'
		runtime 'org.osgi:osgi.enroute.webconsole.xray.provider:2.+'
		runtime 'org.osgi:osgi.enroute.bostock.d3.webresource:3.+'
		runtime 'org.osgi:osgi.enroute.web.simple.provider:+'
		runtime 'org.osgi:osgi.enroute.dtos.bndlib.provider:+'
		runtime 'biz.aQute.bnd:biz.aQute.bndlib:+'
		runtime 'org.json:com.springsource.org.json:1.0.0'
		runtime 'org.apache.felix:org.apache.felix.coordinator:1.0.2'
		runtime 'org.osgi:org.osgi.service.event:1.3.1'
		runtime 'org.osgi:org.osgi.service.metatype:1.3.0'
		runtime 'org.osgi:osgi.enroute.logger.simple.provider:+'
		runtime 'org.osgi:osgi.enroute.executor.simple.provider:+'

		compile('commons-lang:commons-lang:2.6') {
			exclude group: 'commons-logging', module: 'commons-logging'
		}
		compile('commons-io:commons-io:2.2') {
			exclude group: 'commons-logging', module: 'commons-logging'
		}
		compile('commons-fileupload:commons-fileupload:1.3.1') {
			exclude group: 'commons-logging', module: 'commons-logging'
		}

		compile 'org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-core:4.3.+'
		compile 'org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-context:4.3.+'
		compile 'org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-beans:4.3.+'

		compile 'org.eclipse.gemini.blueprint:gemini-blueprint-io:2.1.+'

        /*testCompile 'junit:junit:4.+'
		testCompile ('org.hamcrest:hamcrest-junit:2.0.0.0') {
			exclude group: 'junit', module: 'junit'
		}*/
		compile 'org.osgi:osgi.enroute.hamcrest.wrapper:1.3.0'
		compile 'org.osgi:osgi.enroute.junit.wrapper:4.12.0'

		compile 'org.mockito:mockito-core:2.8.47'
		compile 'org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-test:4.3.+'

		testCompile 'org.assertj:assertj-core:3.8.0'
        testCompile 'xmlunit:xmlunit:1.5'
    }

    afterEvaluate { project ->
        jar {
            manifest {
                attributes(
                    'Bundle-Vendor'         : 'https://www.agentlab.ru',
                    'Bundle-Version'        : "${project.version}",//3.0.0.2345
                    'Bundle-Description'    : "${project.description}",
                    'Bundle-Copyright'      : 'AgentLab (c)',
                    'Bundle-License'        : 'https://www.gnu.org/licenses/lgpl.html',
                    'Bundle-ContactAddress' : 'amivanoff@gmail.com',
                    'Export-Package'        : "${project.name}.*",
                    '-sources'              : 'false', // Not include sources into bundle
                    '-removeheaders'        : 'Provide-Capability, Require-Capability',
                    '-contract'             : '!*',
                    '-noextraheaders'       : 'true',
                    '-baseline'             : '*',
                    '-dsannotations'        : '*'
                )
            }
        }
    }

    //
    // Create Bundle task
    //
    task bundle(type: Bundle) {
        from sourceSets.main.output
    }

    //
    // Create TestOSGi and Export tasks for all *.bndrun file
    //
    project.projectDir.eachFileMatch({it.endsWith('.bndrun')}, {
            ext.fullName = it.name
            ext.bndRunName = fullName.replace('.bndrun', '')
            task ('testOSGi.' + ext.bndRunName, type: TestOSGi) {
                bndrun fullName
            }
            task ('export.' + ext.bndRunName, type: Export) {
                bndrun fullName
                bundlesOnly true
            }
            task ('resolve.' + ext.bndRunName, type: Resolve) {
                bndrun fullName
            }
			//task ('run.' + ext.bndRunName, type: Run) {
			//	bndrun fullName
			//}
        }
    )

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }
}

task wrapper(type: Wrapper) {
    jarFile = rootProject.file('gradle/wrapper/gradle-wrapper.jar')
}
